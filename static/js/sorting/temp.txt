<pre><b>procedure</b> heapsort(a, count) <b>is</b>
    <b>input:</b> an unordered array <i>a</i> of length <i>count</i>
 
    <i>(Build the heap in array a so that largest value is at the root)</i>
    heapify(a, count)

    <i>(The following loop maintains the <a href="/wiki/Loop_invariant" title="Loop invariant">invariants</a> that a[0:end] is a heap and every element</i>
     <i>beyond end is greater than everything before it (so a[end:count] is in sorted order))</i>
    end ← count - 1
    <b>while</b> end &gt; 0 <b>do</b>
        <i>(a[0] is the root and largest value. The swap moves it in front of the sorted elements.)</i>
        swap(a[end], a[0])
        <i>(the heap size is reduced by one)</i>
        end ← end - 1
        <i>(the swap ruined the heap property, so restore it)</i>
        siftDown(a, 0, end)
</pre>